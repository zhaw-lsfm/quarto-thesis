---
title: "Robust Regression and Outlier Detection" 
subtitle: "Chapter 2: Simple Regression"
bibliography: references.bib
author: 
  - Peter J. Rousseeuw
  - Annick M. Leroy
date: "1987-10-19"
format: typst
jupyter: python3
execute:
  echo: false
---



# Example 4: Brain and Weight Data

Table 7 presents the brain weight (in grams) and the body weight (in
kilograms) of 28 animals. (This sample was taken from larger data sets in
@weisberg1980 and @jerison1973.) It is to be investigated whether a larger
brain is required to govern a heavier body. 

A clear picture of the relationship between the logarithms (to the base
10) of these measurements is shown in Figure 7. This logarithmic 
transformation was necessary because plotting the original measurements
would fail to represent either the smaller or the larger measurements.
Indeed, both original variables range over several orders of magnitude. A
linear fit to this transformed data would be equivalent to a relationship of
the form


$$ \hat{y} =\hat{\theta}_2^{\prime} x^{\hat{\theta}_1}  $$


```{python}
#| tbl-cap: "Table 7: Brain and body weights of 28 animals."
#| label: tbl-animals
import pandas as pd
animals = pd.read_csv("Animals.csv")

animals
```

![Logarithmic brain weight versus logarithmic body weight for 28 animals with LS
(dashed line) and RLS fit (solid line).](brain-vs-body.png){#fig-brain-body width=50%}




```{python}
#| label: fig-brain-body
#| fig-cap: "Logarithmic brain weight versus logarithmic body weight for 28 animals with LS (dashed line) and RLS fit (solid line)."
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator

animals['logBrain'] = np.log10(animals['brain'])
animals['logBody'] = np.log10(animals['body'])
X = sm.add_constant(animals['logBody'])

# LS (Ordinary Least Squares) fit
ols_model = sm.OLS(animals['logBrain'], X)
ols_results = ols_model.fit()

# RLS (Robust Least Squares) fit
rls_model = sm.RLM(animals['logBrain'], X, M=sm.robust.norms.HuberT())
rls_results = rls_model.fit()


# Plotting
plt.scatter(animals['logBody'], animals['logBrain'], color='black')
# Sort by logBody to ensure proper line plotting
sorted_indices = np.argsort(animals['logBody'])
sorted_logBody = animals['logBody'].iloc[sorted_indices]
sorted_ols_fitted = ols_results.fittedvalues.iloc[sorted_indices]
sorted_rls_fitted = rls_results.fittedvalues.iloc[sorted_indices]

plt.plot(sorted_logBody, sorted_ols_fitted, color='black', linestyle='--', linewidth=2, label='LS Fit')
plt.plot(sorted_logBody, sorted_rls_fitted, color='black', linestyle='-', linewidth=1.5, label='RLS Fit')
plt.xlabel('Log body weight')
plt.ylabel('Log brain weight')
plt.axis('square')
plt.xlim(-2, 5)
plt.ylim(-2, 5)

# Set major ticks at 0, 2, 4
plt.xticks([0, 2, 4])
plt.yticks([0, 2, 4])

# Set minor ticks at 0.4, 0.8, 1.2, 1.6, 2.4, 2.8, 3.2, 3.6
plt.gca().xaxis.set_minor_locator(MultipleLocator(0.4))
plt.gca().yaxis.set_minor_locator(MultipleLocator(0.4))

# Set ticks to point inward with different lengths
plt.tick_params(direction='in', which='major', length=12, width=1)
plt.tick_params(direction='in', which='minor', length=6, width=1)

plt.show()
```


